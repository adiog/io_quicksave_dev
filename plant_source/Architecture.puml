@startuml

actor user
'actor "api <<locust>>" as api_locust
'actor "oauth <<locust>>" as oauth_locust

rectangle {
  node "oauth" {
    [oauth1] #Gold
    [oauth2] #Gold
  }

  node "www" {
    [www2] #LightGreen
    [www1] #LightGreen
  }

  node "api" {
    rectangle {
    [api2] #Gold
    [ext2] #LightBlue
    }
    rectangle {
    [api1] #Gold
    [ext1] #LightBlue
    }
  }

  node "cdn" {
    [cdn1] #Gold
    [cdn2] #Gold
  }

    cloud "<<fuse>>" {
       [vfs] #Orange
    }
}



rectangle {
  cloud "session/mapping" {
    database memcached as mem
  }

  cloud "mq broker" {
    database "input queue" as input
    database "output queue" as output
  }

  package "master database" {
    database users as map
  }

  database database {
    database db1
    database db2
  }


  database "file storage" {
    database fs1
    database fs2
  }
}

rectangle {
  node "plugin engine" {
    [worker1] #Red
    [worker2] #Red
  }

  node "post engine" {
    [post1] #Gold
    [post2] #Gold
   }
}

'rectangle {
'  cloud "external services" {
'    [esp1]
'    [esp2]
'  }
'}

user --> [www1]
user --> [api1]
user --> [cdn1]
user --> [cdn2]
user --> vfs

'oauth_locust --> [oauth1]

'api_locust --> [api1]
'api_locust --> [oauth1]

[api1] --> mem
user --> [oauth1]
[cdn1] ->> db1
[cdn2] -> mem
[oauth1] --> map
[cdn1] -> mem
[oauth1] -> mem

[vfs] -> db1
[vfs] -> fs1
[cdn1] ->> fs1
[api1] ->> db1
[api1] <-> [ext1]
[api2] <.> [ext2]
[ext1] -> input
input <- [worker1]
output <- [worker1]
fs1 <<- [worker1]
output <- [post1]

db1 <<- [post1]
'[worker1] -> [esp1]

legend
|= |= Components Technology|
|<back:lightgreen>   </back>| Static HTML/CSS/JS |
|<back:gold>   </back>| Safe C++ |
|<back:orange>   </back>| Experimental C++ |
|<back:lightblue>   </back>| Safe(r) Sync Python |
|<back:red>   </back>| QM Async Python |
endlegend
@enduml